openapi: 3.0.0
info:
    title: 'Virtual Examination Portal'
    version: 1.0.0
    description: 'API documentation for your Node.js application'
components:
    securitySchemes: {Auth: {type: apiKey, in: header, name: Authorization}}
security:
    - {Auth: []}
basePath: /
paths:
    /api/v1/auth/login: {post: {summary: 'User login', tags: [Register], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {email: {type: string, format: email, description: 'User''s email address'}, password: {type: string, format: password, description: 'User''s password (at least 6 characters)'}}}}}}, responses: {'200': {description: 'Successful login', content: {application/json: {example: {token: '<JWT_TOKEN>'}}}}, '400': {description: 'Bad request (validation errors)', content: {application/json: {example: {errors: [{msg: 'Please enter your email address.'}, {msg: 'Please insert at least 6 characters.'}]}}}}, '409': {description: 'Bad request ( user not exists)', content: {application/json: {example: {msg: 'User Not exists'}}}}, '500': {description: 'Internal server error', content: {application/json: {example: {msg: 'Server error'}}}}}}}
    /api/v1/institute/register: {post: {summary: 'User login', tags: [Institute], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {email: {type: string, format: email, description: 'User''s email address'}, password: {type: string, format: password, description: 'User''s password (at least 6 characters)'}}}}}}, responses: {'200': {description: 'Successful login', content: {application/json: {example: {token: '<JWT_TOKEN>'}}}}, '400': {description: 'Bad request (validation errors)'}, '409': {description: 'Bad request ( user not exists)'}, '500': {description: 'Internal server error'}}}}
    /api/v1/institute/login: {post: {summary: 'User login', tags: [Institute], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {email: {type: string, format: email, description: 'User''s email address'}, password: {type: string, format: password, description: 'User''s password (at least 6 characters)'}}}}}}, responses: {'200': {description: 'Successful login', content: {application/json: {example: {token: '<JWT_TOKEN>'}}}}, '400': {description: 'Bad request (validation errors)'}, '409': {description: 'Bad request ( user not exists)'}, '500': {description: 'Internal server error'}}}}
    /api/v1/users/register_user: {post: {summary: 'User SignUp', tags: [Login], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, description: 'User''s full name'}, email: {type: string, format: email, description: 'User''s email address'}, password: {type: string, format: password, description: 'User''s password (at least 6 characters)'}}}}}}, responses: {'200': {description: 'Successful signup', content: {application/json: {example: {token: '<JWT_TOKEN>'}}}}, '400': {description: 'Bad request (validation errors)', content: {application/json: {example: {errors: [{msg: 'Please enter your full name.'}, {msg: 'Please enter your email address.'}, {msg: 'Please insert at least 6 characters.'}]}}}}, '409': {description: 'Conflict (user already exists)', content: {application/json: {example: {msg: 'User already exists'}}}}, '500': {description: 'Internal server error', content: {application/json: {example: {msg: 'Server error'}}}}}}}
tags:
    - {name: 'All APIs', description: 'Register -> Login -> Create Institute -> Create Room -> Create Exam -> Create Question'}
